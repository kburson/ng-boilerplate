//
//module.exports = function(grunt) {
//    'use strict';
//
//    var fs, remote, serverConnection, webdriver;
//
//    fs = require('fs');
//    webdriver = require('selenium-webdriver');
//    remote = require('selenium-webdriver/remote');
//
//    grunt.registerMultiTask('webdriver_jasmine_runner', 'Runs a jasmine test with webdriver.', function() {
//        var done, options, server, serverAddress;
//        options = this.options({
//            seleniumJar: __dirname + '/lib/selenium-server-standalone-2.34.0.jar',
//            seleniumServerPort: 4444,
//            seleniumServerArgs: [],
//            browser: 'chrome',
//            testServer: 'localhost',
//            testServerPort: 8000,
//            testFile: '_SpecRunner.html',
//            ignoreSloppyTests: false,
//            allTestsTimeout: 30 * 60 * 1000
//        });
//        options.browser = grunt.option('browser') || options.browser;
//        options.ignoreSloppyTests = grunt.option('ignoreSloppyTests') || options.ignoreSloppyTests;
//        if (!fs.existsSync(options.seleniumJar)) {
//            throw Error("The specified jar does not exist: " + options.seleniumJar);
//        }
//        done = this.async();
//        if ((options.seleniumServerHost != null) && (options.seleniumServerPort != null)) {
//            serverAddress = "http://" + options.seleniumServerHost + ":" + options.seleniumServerPort + "/wd/hub";
//            return serverConnection(serverAddress, options, done);
//        } else {
//            server = new remote.SeleniumServer(options.seleniumJar, {
//                port: options.seleniumServerPort,
//                args: options.seleniumServerArgs
//            });
//            grunt.log.writeln("Starting webdriver server at http://localhost:" + options.seleniumServerPort);
//            server.start();
//            return server.address().then(function(serverAddress) {
//                return serverConnection(serverAddress, options, done);
//            });
//        }
//    });
//    return serverConnection = function(serverAddress, options, done) {
//        var allTestsPassed, driver, getWebServerUrl, outputFailures, outputPasses, testUrl;
//        testUrl = "http://" + options.testServer + ":" + options.testServerPort + "/" + options.testFile;
//        getWebServerUrl = function(session) {
//            return "" + testUrl + "?wdurl=" + (encodeURIComponent(serverAddress)) + "&wdsid=" + session + "&useWebdriver=true&ignoreSloppyTests=" + options.ignoreSloppyTests;
//        };
//        driver = new webdriver.Builder().usingServer(serverAddress).withCapabilities({
//            'browserName': options.browser
//        }).build();
//        grunt.log.writeln("Connecting to webdriver server at " + serverAddress + ".");
//        grunt.log.writeln("Running Jasmine tests at " + testUrl + " with " + options.browser + ".");
//        allTestsPassed = false;
//        outputPasses = 0;
//        outputFailures = 0;
//        return driver.getSession().then(function(session) {
//            var runJasmineTests;
//            runJasmineTests = webdriver.promise.createFlow(function(flow) {
//                return flow.execute(function() {
//                    return driver.get(getWebServerUrl(session.getId())).then(function() {
//                        var startTime;
//                        startTime = new Date();
//                        driver.wait(function() {
//                            return driver.isElementPresent(webdriver.By.className('symbolSummary')).then(function(symbolSummaryFound) {
//                                return symbolSummaryFound;
//                            });
//                        }, 5000);
//                        return driver.findElement(webdriver.By.className('symbolSummary')).then(function(symbolSummaryElement) {
//                            return symbolSummaryElement.findElements(webdriver.By.tagName('li')).then(function(symbolSummaryIcons) {
//                                var numTests;
//                                numTests = symbolSummaryIcons.length;
//                                grunt.log.writeln('Test page loaded.  Running ' + ("" + numTests).cyan + ' tests...');
//                                driver.wait(function() {
//                                    return symbolSummaryElement.isElementPresent(webdriver.By.className('pending')).then(function(isPendingPresent) {
//                                        return webdriver.promise.fullyResolved([
//                                                symbolSummaryElement.findElements(webdriver.By.className('passed')).then(function(failedElements) {
//                                                    var pendingFailureDots;
//                                                    return pendingFailureDots = failedElements.length - outputPasses;
//                                                }), symbolSummaryElement.findElements(webdriver.By.className('failed')).then(function(failedElements) {
//                                                    var pendingFailureDots;
//                                                    return pendingFailureDots = failedElements.length - outputFailures;
//                                                })
//                                            ]).then(function(_arg) {
//                                                var dotsThreshold, failuresToOutput, outputDots, passesToOutput, pendingFailures, pendingPasses;
//                                                pendingPasses = _arg[0], pendingFailures = _arg[1];
//                                                dotsThreshold = isPendingPresent ? 100 : 0;
//                                                while ((pendingPasses + pendingFailures) > dotsThreshold) {
//                                                    failuresToOutput = Math.min(pendingFailures, 100);
//                                                    passesToOutput = Math.min(100 - failuresToOutput, pendingPasses);
//                                                    pendingPasses -= passesToOutput;
//                                                    pendingFailures -= failuresToOutput;
//                                                    outputPasses += passesToOutput;
//                                                    outputFailures += failuresToOutput;
//                                                    outputDots = outputPasses + outputFailures;
//                                                    grunt.log.writeln("" + (Array(failuresToOutput + 1).join('F')) + (Array(passesToOutput + 1).join('.')) + " " + outputDots + " / " + numTests + " (" + outputFailures + ")");
//                                                }
//                                                if (isPendingPresent) {
//                                                    return webdriver.promise.delayed(900).then(function() {
//                                                        return !isPendingPresent;
//                                                    });
//                                                } else {
//                                                    return !isPendingPresent;
//                                                }
//                                            });
//                                    });
//                                }, options.allTestsTimeout);
//                                driver.wait(function() {
//                                    return driver.isElementPresent(webdriver.By.id('details')).then(function(isPresent) {
//                                        return isPresent;
//                                    });
//                                }, 6000);
//                                return driver.findElement(webdriver.By.id('details')).then(function(detailsElement) {
//                                    grunt.log.writeln("Done running all tests. Suite took " + ((new Date() - startTime) / 1000) + " seconds.");
//                                    return detailsElement.isElementPresent(webdriver.By.className('failed')).then(function(hasFailures) {
//                                        if (hasFailures) {
//                                            return detailsElement.findElements(webdriver.By.className('failed')).then(function(failedElements) {
//                                                var failedElement;
//                                                grunt.log.writeln(("" + failedElements.length + " of " + numTests + " tests failed:").red);
//                                                return webdriver.promise.fullyResolved((function() {
//                                                        var _i, _len, _results;
//                                                        _results = [];
//                                                        for (_i = 0, _len = failedElements.length; _i < _len; _i++) {
//                                                            failedElement = failedElements[_i];
//                                                            _results.push(failedElement.getText());
//                                                        }
//                                                        return _results;
//                                                    })()).then(function(failureTexts) {
//                                                        var failureText;
//                                                        return grunt.log.writeln(((function() {
//                                                            var _i, _len, _results;
//                                                            _results = [];
//                                                            for (_i = 0, _len = failureTexts.length; _i < _len; _i++) {
//                                                                failureText = failureTexts[_i];
//                                                                _results.push(failureText.yellow);
//                                                            }
//                                                            return _results;
//                                                        })()).join("\n\n"));
//                                                    });
//                                            });
//                                        } else {
//                                            allTestsPassed = true;
//                                            return grunt.log.writeln('All ' + ("" + numTests).cyan + ' tests passed!');
//                                        }
//                                    });
//                                });
//                            });
//                        });
//                    });
//                });
//            });
//            return runJasmineTests.then(function() {
//                if (!grunt.option('keepalive')) {
//                    grunt.log.writeln('Closing test servers.');
//                    return driver.quit().addBoth(function() {
//                        if (typeof server !== "undefined" && server !== null) {
//                            server.stop();
//                        }
//                        return done(allTestsPassed);
//                    });
//                }
//            });
//        });
//    };
//};
